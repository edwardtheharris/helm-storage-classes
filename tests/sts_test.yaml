suite: "CSI Driver LVM Test Suite"
templates:
  - "charts/csi-driver-lvm/templates/controller.yaml"
  - "charts/csi-driver-lvm/templates/plugin.yaml"
  - "charts/csi-driver-lvm/templates/storageclasses.yaml"
  - "templates/test-csi-driver-lvm-pod.yaml"
  - "templates/test-csi-driver-lvm-sts.yaml"
  - "templates/common.yaml"

tests:
  - it: "should render PodSecurityPolicy for controller with correct configurations"
    template: "charts/csi-driver-lvm/templates/controller.yaml"
    asserts:
      - isKind:
          of: PodSecurityPolicy
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-controller$"
      - equal:
          path: spec.privileged
          value: true

  - it: "should render PodSecurityPolicy for plugin with correct configurations"
    template: "charts/csi-driver-lvm/templates/plugin.yaml"
    asserts:
      - isKind:
          of: PodSecurityPolicy
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-plugin$"
      - equal:
          path: spec.privileged
          value: true

  - it: "should render ServiceAccount for controller with correct configurations"
    template: "charts/csi-driver-lvm/templates/controller.yaml"
    asserts:
      - isKind:
          of: ServiceAccount
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-controller$"

  - it: "should render ServiceAccount for plugin with correct configurations"
    template: "charts/csi-driver-lvm/templates/plugin.yaml"
    asserts:
      - isKind:
          of: ServiceAccount
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-plugin$"

  - it: "should render StorageClass with correct configurations"
    template: "charts/csi-driver-lvm/templates/storageclasses.yaml"
    asserts:
      - isKind:
          of: StorageClass
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-linear$"
      - equal:
          path: provisioner
          value: "lvm.csi.metal-stack.io"

  - it: "should render ClusterRole for controller with correct rules"
    template: "charts/csi-driver-lvm/templates/controller.yaml"
    asserts:
      - isKind:
          of: ClusterRole
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-controller$"
      - hasItems:
          path: rules[0].verbs
          items:
            - "get"
            - "list"
            - "watch"
            - "update"
            - "patch"
            - "create"
            - "delete"

  - it: "should render ClusterRole for plugin with correct rules"
    template: "charts/csi-driver-lvm/templates/plugin.yaml"
    asserts:
      - isKind:
          of: ClusterRole
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-plugin$"
      - hasItems:
          path: rules[0].verbs
          items:
            - "get"
            - "list"
            - "watch"
            - "update"
            - "patch"
            - "create"
            - "delete"

  - it: "should render ClusterRoleBinding for controller with correct configurations"
    template: "charts/csi-driver-lvm/templates/controller.yaml"
    asserts:
      - isKind:
          of: ClusterRoleBinding
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-controller$"
      - matchRegex:
          path: subjects[0].name
          pattern: "^csi-driver-lvm-controller$"
      - equal:
          path: roleRef.name
          value: "csi-driver-lvm-controller"

  - it: "should render ClusterRoleBinding for plugin with correct configurations"
    template: "charts/csi-driver-lvm/templates/plugin.yaml"
    asserts:
      - isKind:
          of: ClusterRoleBinding
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-plugin$"
      - matchRegex:
          path: subjects[0].name
          pattern: "^csi-driver-lvm-plugin$"
      - equal:
          path: roleRef.name
          value: "csi-driver-lvm-plugin"

  - it: "should render Role for controller with correct rules"
    template: "charts/csi-driver-lvm/templates/controller.yaml"
    asserts:
      - isKind:
          of: Role
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-controller$"
      - hasItems:
          path: rules[0].verbs
          items:
            - "use"

  - it: "should render Role for plugin with correct rules"
    template: "charts/csi-driver-lvm/templates/plugin.yaml"
    asserts:
      - isKind:
          of: Role
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-plugin$"
      - hasItems:
          path: rules[0].verbs
          items:
            - "use"

  - it: "should render RoleBinding for controller with correct configurations"
    template: "charts/csi-driver-lvm/templates/controller.yaml"
    asserts:
      - isKind:
          of: RoleBinding
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-controller$"
      - matchRegex:
          path: subjects[0].name
          pattern: "^csi-driver-lvm-controller$"
      - equal:
          path: roleRef.name
          value: "csi-driver-lvm-controller"

  - it: "should render RoleBinding for plugin with correct configurations"
    template: "charts/csi-driver-lvm/templates/plugin.yaml"
    asserts:
      - isKind:
          of: RoleBinding
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-plugin$"
      - matchRegex:
          path: subjects[0].name
          pattern: "^csi-driver-lvm-plugin$"
      - equal:
          path: roleRef.name
          value: "csi-driver-lvm-plugin"

  - it: "should render DaemonSet for plugin with correct configurations"
    template: "charts/csi-driver-lvm/templates/plugin.yaml"
    asserts:
      - isKind:
          of: DaemonSet
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-plugin$"
      - hasItems:
          path: spec.template.spec.containers[0].args
          items:
            - "--v=5"
            - "--csi-address=/csi/csi.sock"
            - "--kubelet-registration-path=/var/lib/kubelet/plugins/csi-driver-lvm/csi.sock"

  - it: "should render StatefulSet for controller with correct configurations"
    template: "charts/csi-driver-lvm/templates/controller.yaml"
    asserts:
      - isKind:
          of: StatefulSet
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-controller$"
      - hasItems:
          path: spec.template.spec.containers[0].args
          items:
            - "--v=5"
            - "--csi-address=/csi/csi.sock"
      - matchRegex:
          path: spec.template.spec.serviceAccountName
          pattern: "^csi-driver-lvm-controller$"

  - it: "should render CSIDriver with correct configurations"
    template: "templates/common.yaml"
    asserts:
      - isKind:
          of: CSIDriver
      - matchRegex:
          path: metadata.name
          pattern: "^lvm.csi.metal-stack.io$"

  - it: "should render PersistentVolumeClaim for pod test with correct configurations"
    template: "templates/test-csi-driver-lvm-pod.yaml"
    asserts:
      - isKind:
          of: PersistentVolumeClaim
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-pod-test$"
      - matchRegex:
          path: metadata.annotations."helm.sh/hook"
          pattern: "^test$"
      - equal:
          path: spec.storageClassName
          value: "csi-driver-lvm-linear"
      - equal:
          path: spec.resources.requests.storage
          value: "100Mi"

  - it: "should render Pod for pod test with correct configurations"
    template: "templates/test-csi-driver-lvm-pod.yaml"
    asserts:
      - isKind:
          of: Pod
      - matchRegex:
          path: metadata.name
          pattern: "^csi-driver-lvm-pod-test$"
      - matchRegex:
          path: metadata.annotations."helm.sh/hook"
          pattern: "^test$"
      - matchRegex:
          path: spec.containers[0].image
          pattern: "^dandb79/lsblk-testing:v1.2"
